# Learn more about services, parameters and containers at
# https://symfony.com/doc/current/service_container.html
parameters:
    #parameter_name: value

services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false


    etudiant.registration.form.type:
            class: AppBundle\Form\RegistrationEtudiantFormType
            arguments: ['%fos_user.model.user.class%']
            tags:
                -
                    name: form.type
                    alias: etudiant_registrationtype

    professeur.registration.form.type:
                class: AppBundle\Form\RegistrationProfesseurFormType
                arguments: ['%fos_user.model.user.class%']
                tags:
                    -
                        name: form.type
                        alias: professeur_registrationtype

    agent_administratif.registration.form.type:
                class: AppBundle\Form\RegistrationAgentAdministratifFormType
                arguments: ['%fos_user.model.user.class%']
                tags:
                    -
                        name: form.type
                        alias: agent_administratif_registrationtype

    # makes classes in src/AppBundle available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    AppBundle\:
        resource: '../../src/AppBundle/*'
        # you can exclude directories or files
        # but if a service is unused, it's removed anyway
        exclude: '../../src/AppBundle/{Entity,Repository,Tests}'

    # controllers are imported separately to make sure they're public
    # and have a tag that allows actions to type-hint services
    AppBundle\Controller\:
        resource: '../../src/AppBundle/Controller'
        public: true
        tags: ['controller.service_arguments']

    # add more services, or override services that need manual wiring
    # AppBundle\Service\ExampleService:
    #     arguments:
    #         $someArgument: 'some_value'


    admin.reservation:
        class: AppBundle\Admin\ReservationAdmin
        arguments: [~, AppBundle\Entity\Reservation, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Reservation }
        public: true

    admin.salle:
        class: AppBundle\Admin\SalleAdmin
        arguments: [~, AppBundle\Entity\Salle, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Salle}
        public: true

    admin.etage:
        class: AppBundle\Admin\EtageAdmin
        arguments: [~, AppBundle\Entity\Etage, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Etage}
        public: true

    admin.batiment:
            class: AppBundle\Admin\BatimentAdmin
            arguments: [~, AppBundle\Entity\Batiment, ~]
            tags:
                - { name: sonata.admin, manager_type: orm, label: Batiment}
            public: true

    admin.site:
                class: AppBundle\Admin\SiteAdmin
                arguments: [~, AppBundle\Entity\Site, ~]
                tags:
                    - { name: sonata.admin, manager_type: orm, label: Site}
                public: true


    appbundle.service.listener:
            class: AppBundle\Listener\LoadDataListener
            arguments: [~, AppBundle\Entity\CalendarEvent, ~]
            tags:
                - { name: 'kernel.event_listener', event: 'fullcalendar.load_data', method: loadData }